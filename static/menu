#!/bin/bash
#ADM_JMNIC Vers (MODS BY RAZHIEL)
#02/08/2022

#COLORES
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)

#DIRECTORIOS
SCPdir="/etc/newadm" && [[ ! -d ${SCPdir} ]] && exit 1
SCPusr="${SCPdir}/ger-user" && [[ ! -d ${SCPusr} ]] && mkdir ${SCPusr}
SCPfrm="/etc/ger-frm" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPinst="/etc/ger-inst" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPidioma="${SCPdir}/idioma"
fecha=$(printf '%(%D)T') 
hora=$(printf '%(%H:%M:%S)T')

if [[ -e /etc/bash.bashrc-bakup ]]; then AutoRun="\033[1;32m[ON]"
elif [[ -e /etc/bash.bashrc ]]; then AutoRun="\033[1;31m[OFF]"
fi

wget -O /etc/versin_script_new https://www.dropbox.com/s/rq5pvc48i3r2gwt/VercUp &>/dev/null
wget -O /etc/versin_script https://www.dropbox.com/s/exitk4u5kvic8p2/VercOld &>/dev/null

menu_info () { 
meu_ip &>/dev/null 
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then 
system=$(cut -d' ' -f1 /etc/issue.net) 
system+=$(echo ' ') 
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}') 
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then 
system=$(cut -d' ' -f1 /etc/issue.net) 
system+=$(echo ' ') 
system+=$(cut -d' ' -f3 /etc/issue.net) 
else 
system=$(cut -d' ' -f1 /etc/issue.net) 
fi 
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')") 
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})") 
_ram2=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $4'})") 
_core=$(printf '%-8s' "$(grep -c cpu[0-9] /proc/stat)") 
_usop=$(top -bn1 | sed -rn '3s/[^0-9]* ([0-9\.]+) .*/\1/p;4s/.*, ([0-9]+) .*/\1/p' | tr '\n' ' ') 
modelo1=$(printf '%-11s' "$(lscpu | grep Arch | sed 's/\s\+/,/g' | cut -d , -f2)") 
mb=$(printf '%-8s' "$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)") 
_system=$(printf '%-13s' "$system") 
_hora=$(printf '%(%H:%M:%S)T') 
_hoje=$(date +'%d/%m/%Y') 
echo -e "\033[1;31m OS\033[1;37m/\033[1;31mFECHA\033[1;37m/\033[1;31mHORA     MEMORIA\033[1;37m/\033[1;31m/RAM      SISTEMA\033[1;37m/\033[1;31mCPU " 
echo -e "\033[1;37m OS\033[1;35m: \033[1;32m$_system \033[1;37mTOTAL\033[1;35m: \033[1;32m$_ram\033[1;37mIP\033[1;35m:\033[1;32m $(meu_ip) " 
echo -e "\033[1;37m DIA\033[1;35m: \033[1;32m$_hoje \033[1;37m  CACHE\033[1;35m: \033[1;32m$mb\033[1;37m  BASE\033[1;35m:\033[1;32m $modelo1" 
echo -e "\033[1;37m HORA\033[1;35m: \033[1;32m$_hora  \033[1;37m  LIBRE\033[1;35m: \033[1;32m$_ram2\033[1;37mUSO DE CPU\033[1;35m: \033[1;32m$_usop" 
} 

#FUNCION GLOBAL
msg () {
local colors="/etc/new-adm-color"
if [[ ! -e $colors ]]; then
COLOR[0]='\033[1;97m' #BRAN='\033[1;97m'
COLOR[1]='\e[31m' #VERMELHO='\e[31m'
COLOR[2]='\e[32m' #VERDE='\e[32m'
COLOR[3]='\e[33m' #AMARELO='\e[33m'
COLOR[4]='\e[34m' #AZUL='\e[34m'
COLOR[5]='\e[35m' #MAGENTA='\e[35m'
COLOR[6]='\033[1;36m' #MAG='\033[1;36m'
else
local COL=0
for number in $(cat $colors); do
case $number in
1)COLOR[$COL]='\033[1;97m';;
2)COLOR[$COL]='\e[31m';;
3)COLOR[$COL]='\e[32m';;
4)COLOR[$COL]='\e[33m';;
5)COLOR[$COL]='\e[34m';;
6)COLOR[$COL]='\e[35m';;
7)COLOR[$COL]='\033[1;36m';;
esac
let COL++
done
fi
NEGRITO='\e[1m'
SEMCOR='\e[0m'
 case $1 in
  -ne)cor="${COLOR[1]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
  -ama)cor="${COLOR[3]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm)cor="${COLOR[3]}${NEGRITO}[!] ${COLOR[1]}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm2)cor="${COLOR[1]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -azu)cor="${COLOR[6]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verd)cor="${COLOR[2]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -bra)cor="${COLOR[0]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
 "-bar2"|"-bar")cor="${COLOR[1]}—————————————————————————————————————————————————————————" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
 esac
}

canbio_color () {
clear
msg -bar2
msg -ama "   Intercambio de Colores del Panel: ADM-JMNIC "
msg -bar2
msg -ama "$(fun_trans "Selecione 7 cores"): "
echo -e '\033[1;37m [1] ###\033[0m'
echo -e '\e[31m [2] ###\033[0m'
echo -e '\e[32m [3] ###\033[0m'
echo -e '\e[33m [4] ###\033[0m'
echo -e '\e[34m [5] ###\033[0m'
echo -e '\e[35m [6] ###\033[0m'
echo -e '\033[1;36m [7] ###\033[0m'
msg -bar2
for number in $(echo {1..7}); do
msg -ne "$(fun_trans "Digite un Color") [$number]: " && read corselect
[[ $corselect != @([1-7]) ]] && corselect=1
cores+="$corselect "
corselect=0
done
echo "$cores" > /etc/new-adm-color
msg -bar2
}

#FUNCION TRADUCTOR GLOBAL
fun_trans () { 
local texto
local retorno
declare -A texto
SCPidioma="${SCPdir}/idioma"
[[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
local LINGUAGE=$(cat ${SCPidioma})
[[ -z $LINGUAGE ]] && LINGUAGE=es
[[ $LINGUAGE = "es" ]] && echo "$@" && return
[[ ! -e /usr/bin/trans ]] && wget -O /usr/bin/trans https://www.dropbox.com/s/c51cfo6gceakynv/trans &> /dev/null
[[ ! -e /etc/texto-adm ]] && touch /etc/texto-adm
source /etc/texto-adm
if [[ -z "$(echo ${texto[$@]})" ]]; then
retorno="$(source trans -e bing -b es:${LINGUAGE} "$@"|sed -e 's/[^a-z0-9 -]//ig' 2>/dev/null)"
echo "texto[$@]='$retorno'"  >> /etc/texto-adm
echo "$retorno"
else
echo "${texto[$@]}"
fi
}

#ACTUALIZADOR
atualiza_fun () {
cd $HOME
tput cuu1 && tput dl1
tput clear
msg -bar
msg -ama "$(fun_trans "  ACTUALIZADOR DE SCRIPTS"): \033[1;31m ADM-JMNIC "
msg -bar2
msg -verm "$(fun_trans " Se Procede a realizar cambios en el sistema: " )"
msg -bar2
while [[ $Key != @(s|S|y|Y|n|N) ]]; do
msg -ne "$(fun_trans ">>> De Acuerdo")? [S/N]: " && read Key
tput cuu1 && tput dl1
done
if [[ $Key = @(s|S|y|Y) ]]; then
msg -verm "$(fun_trans "Perfecto, Iniciando Procedimiento"): "
wget https://www.dropbox.com/s/mmk43tpbs8al1z4/installadm.sh; chmod 777 installadm.sh* && ./installadm.sh*
local LINGUAGE=$(cat ${SCPidioma})
$HOME/typhscp "${LINGUAGE}"
else
msg -verm "$(fun_trans "Procedimiento Cancelado"): "
msg -bar2
fi
}

funcao_idioma () {
tput clear
msg -bar2
echo -e "\e[2;92m   SISTEMA DE IDIOMAS ADM-JMNIC \e[0m"
msg -bar2
declare -A idioma=( [1]="en English" [2]="es Spanish" [3]="pt Portuguese" )
for ((i=1; i<=12; i++)); do
valor1="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor1 ]] && break
valor1="\033[1;32m[$i] > \033[1;33m$valor1"
    while [[ ${#valor1} -lt 37 ]]; do
       valor1=$valor1" "
    done
echo -ne "$valor1"
let i++
valor2="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor2 ]] && {
   echo -e " "
   break
   }
valor2="\033[1;32m[$i] > \033[1;33m$valor2"
     while [[ ${#valor2} -lt 37 ]]; do
        valor2=$valor2" "
     done
echo -ne "$valor2"
let i++
valor3="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor3 ]] && {
   echo -e " "
   break
   }
valor3="\033[1;32m[$i] > \033[1;33m$valor3"
     while [[ ${#valor3} -lt 37 ]]; do
        valor3=$valor3" "
     done
echo -e "$valor3"
done
msg -bar2
unset selection
while [[ ${selection} != @([1-3]) ]]; do
echo -ne "\033[1;37m$(fun_trans "Seleccione una Opción"): " && read selection
tput cuu1 && tput dl1
done
[[ -e /etc/texto-adm ]] && rm /etc/texto-adm
echo "$(echo ${idioma[$selection]}|cut -d' ' -f1)" > ${SCPidioma}
}

#PUERTOS EN SISTEMA
mine_port () {
clear
msg -bar
echo -e "\033[1;93m      INFORMACION DEL SISTEMA Y PUERTOS ACTIVOS"
msg -bar2
menu_info
msg -bar2
local portasVAR=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
local NOREPEAT
local reQ
local Port
while read port; do
reQ=$(echo ${port}|awk '{print $1}')
Port=$(echo {$port} | awk '{print $9}' | awk -F ":" '{print $2}')
[[ $(echo -e $NOREPEAT|grep -w "$Port") ]] && continue
NOREPEAT+="$Port\n"
case ${reQ} in
squid|squid3)
[[ -z $SQD ]] && local SQD="\033[1;31m SQUID: \033[1;32m"
SQD+="$Port ";;
apache|apache2)
[[ -z $APC ]] && local APC="\033[1;31m APACHE: \033[1;32m"
APC+="$Port ";;
ssh|sshd)
[[ -z $SSH ]] && local SSH="\033[1;31m SSH: \033[1;32m"
SSH+="$Port ";;
dropbear)
[[ -z $DPB ]] && local DPB="\033[1;31m DROPBEAR: \033[1;32m"
DPB+="$Port ";;
ssserver|ss-server)
[[ -z $SSV ]] && local SSV="\033[1;31m SHADOWSOCKS: \033[1;32m"
SSV+="$Port ";;
openvpn)
[[ -z $OVPN ]] && local OVPN="\033[1;31m OPENVPN-TCP: \033[1;32m"
OVPN+="$Port ";;
stunnel4|stunnel)
[[ -z $SSL ]] && local SSL="\033[1;31m STUNNEL-4: \033[1;32m"
SSL+="$Port ";;
python|python3)
[[ -z $PY3 ]] && local PY3="\033[1;31m SOCKS/PYTHON: \033[1;32m"
PY3+="$Port ";;
v2ray)
[[ -z $V2R ]] && local V2R="\033[1;31m V2RAY: \033[1;32m"
V2R+="$Port ";;
badvpn-ud)
[[ -z $BAD ]] && local BAD="\033[1;31m BADVPN: \033[1;32m"
BAD+="$Port ";;
esac
done <<< "${portasVAR}"
#UDP
local portasVAR=$(lsof -V -i -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND")
local NOREPEAT
local reQ
local Port
while read port; do
reQ=$(echo ${port}|awk '{print $1}')
Port=$(echo ${port} | awk '{print $9}' | awk -F ":" '{print $2}')
[[ $(echo -e $NOREPEAT|grep -w "$Port") ]] && continue
NOREPEAT+="$Port\n"
case ${reQ} in
openvpn)
[[ -z $OVPN ]] && local OVPN="\033[0;36m OPENVPN-UDP: \033[1;32m"
OVPN+="$Port ";;
esac
done <<< "${portasVAR}"
[[ ! -z $SSH ]] && echo -e $SSH
[[ ! -z $SSL ]] && echo -e $SSL
[[ ! -z $WS ]] && echo -e $WS
[[ ! -z $DPB ]] && echo -e $DPB
[[ ! -z $SQD ]] && echo -e $SQD 
[[ ! -z $PY3 ]] && echo -e $PY3
[[ ! -z $SSV ]] && echo -e $SSV
[[ ! -z $V2R ]] && echo -e $V2R 
[[ ! -z $APC ]] && echo -e $APC
[[ ! -z $OVPN ]] && echo -e $OVPN
[[ ! -z $BAD ]] && echo -e $BAD
msg -bar2
}

#KEYS OFUSCADOR
ofus () {
unset txtofus
number=$(expr length $1)
for((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
case ${txt[$i]} in
".")txt[$i]="*";;
"*")txt[$i]=".";;
"1")txt[$i]="@";;
"@")txt[$i]="1";;
"2")txt[$i]="?";;
"?")txt[$i]="2";;
"4")txt[$i]="K";;
"K")txt[$i]="4";;
"-")txt[$i]="%";;
"%")txt[$i]="-";;
esac
txtofus+="${txt[$i]}"
done
echo "$txtofus" | rev
}

#CACHE CLEANER
limpar_caches () {
tput clear
(
VE="\033[1;33m" && MA="\033[1;31m" && DE="\033[1;32m"
while [[ ! -e /tmp/abc ]]; do
A+="#"
echo -e "${VE}[${MA}${A}${VE}]" >&2
sleep 0.3s
tput cuu1 && tput dl1
done
echo -e "${VE}[${MA}${A}${VE}] - ${DE}[100%]" >&2
rm /tmp/abc
) &
echo 3 > /proc/sys/vm/drop_caches &>/dev/null
sleep 1s
sysctl -w vm.drop_caches=3 &>/dev/null
apt-get autoclean -y &>/dev/null
sleep 1s
apt-get clean -y &>/dev/null
rm /tmp/* &>/dev/null
touch /tmp/abc
sleep 0.5s
msg -bar
msg -ama "$(fun_trans ${id} " CACHE OPTIMIZADA, PROCESO CONCLUIDO")"
msg -bar
}

#AUTOINICIO DE SCRIPT
fun_autorun () {
if [[ -e /etc/bash.bashrc-bakup ]]; then
mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
cat /etc/bash.bashrc | grep -v "/etc/newadm/menu" > /tmp/bash
mv -f /tmp/bash /etc/bash.bashrc
echo
msg -ama "$(fun_trans " ELIMINADO CON EXITO")"
msg -bar
elif [[ -e /etc/bash.bashrc ]]; then
cat /etc/bash.bashrc|grep -v /bin/adm > /etc/bash.bashrc.2
echo '/etc/newadm/menu' >> /etc/bash.bashrc.2
cp /etc/bash.bashrc /etc/bash.bashrc-bakup
mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
echo
msg -ama "$(fun_trans " AUTO INICIO ACTIVADO...")"
msg -bar
fi
}

#BARRA DE CARGA
fun_bar () {
comando="$1"
 _=$(
$comando > /dev/null 2>&1
) & > /dev/null
pid=$!
while [[ -d /proc/$pid ]]; do
echo -ne " \033[1;33m["
   for((i=0; i<10; i++)); do
   echo -ne "\033[1;31m▓▓"
   sleep 0.2
   done
echo -ne "\033[1;33m]"
sleep 1s
echo
tput cuu1
tput dl1
done
echo -e " \033[1;33m[\033[1;31m▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\033[1;33m] - \033[1;32m100%\033[0m"
sleep 1s
}

meu_ip () {
if [[ -e /etc/MEUIPADM ]]; then
echo "$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}

fun_ip () {
if [[ -e /etc/MEUIPADM ]]; then
IP="$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}

fun_eth () {
eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
    [[ $eth != "" ]] && {
    msg -bar
    msg -ama " $(fun_trans "Aplicar sistema para mejorar los paquetes SSH?")"
    msg -ama " $(fun_trans "Opción Para Usuarios Avanzados")"
    msg -bar
    read -p " [S/N]: " -e -i n sshsn
           [[ "$sshsn" = @(s|S|y|Y) ]] && {
           echo -e "${cor[1]} $(fun_trans "Corrección de problemas de paquetes de SSH...")"
           echo -e " $(fun_trans "Cuál es la tarifa  RX")"
           echo -ne "[ 1 - 999999999 ]: "; read rx
           [[ "$rx" = "" ]] && rx="999999999"
           echo -e " $(fun_trans "¿Cuál es la tarifa RX?")"
           echo -ne "[ 1 - 999999999 ]: "; read tx
           [[ "$tx" = "" ]] && tx="999999999"
           apt-get install ethtool -y > /dev/null 2>&1
           ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
           }
     msg -bar
     }
}

os_system () {
system=$(echo $(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //'))
echo $system|awk '{print $1, $2}'
}

#DESINTALADOR
remove_script () {
   clear
   msg -bar
   msg -ama "          ¿ DESEA DESINSTALAR SCRIPT ?"
   msg -bar
   echo -e "    Esto borrara todos los archivos del script"
   msg -bar
   while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
      read -p " [S/N]: " yesno
      tput cuu1 && tput dl1
   done
   if [[ ${yesno} = @(s|S|y|Y) ]]; then
      rm -rf ${SCPdir} &>/dev/null
      rm -rf ${SCPusr} &>/dev/null
      rm -rf ${SCPinst} &>/dev/null
      [[ -e /bin/newadm ]] && rm /bin/newadm
      [[ -e /usr/bin/newadm ]] && rm /usr/bin/newadm
      [[ -e /bin/menu ]] && rm /bin/menu
      [[ -e /usr/bin/menu ]] && rm /usr/bin/menu
      cd $HOME
   fi
   sudo apt-get --purge remove squid -y >/dev/null 2>&1
   sudo apt-get --purge remove stunnel4 -y >/dev/null 2>&1
   sudo apt-get --purge remove dropbear -y >/dev/null 2>&1
mv .bashrc.backup .bashrc
sleep 1
sudo reboot
}

oracl () { 
clear 
msg -bar
msg -ama "  PATCHER PARA SISTEMAS CON BLOQUEO || ADM-JMNIC" 
msg -bar
msg -ama " ESTA HERRAMIENTA ES PARA LAS VPS ORACLE/AWS/AZR" 
msg -ama " TAMBIEN PARA OTRAS VPS QUE NECESITAN UTILIZAR ESTA OPCION" 
msg -bar
echo -ne " Desea Continuar? [S/N]: "; read x 
[[ $x = @(n|N) ]] && msg -bar && return 
msg -bar 
sudo apt update -y &>/dev/null 
sudo apt install firewalld -y &>/dev/null 
sudo apt install apache2 &>/dev/null 
sudo firewall-cmd --zone=public --permanent --add-port=80/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=81/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=90/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=110/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=143/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=442/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=443/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=444/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=8081/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=5300/udp 
sudo firewall-cmd --zone=public --permanent --add-port=7200/udp 
sudo firewall-cmd --zone=public --permanent --add-port=7300/udp 
sudo firewall-cmd --reload 
sudo firewall-cmd --zone=public --list-ports &>/dev/null 
msg -azu " FIX AGREGADO" 
} 

#FUNCION DETALLES GENERALES
systen_info () {
tput clear
msg -bar
msg -ama "$(fun_trans " DETALLES DEL SISTEMA OPERATIVO")"
null="\033[1;31m"
msg -bar
if [ ! /proc/cpuinfo ]; then msg -verm "$(fun_trans "Sistema No Soportado")" && msg -bar; return 1; fi
if [ ! /etc/issue.net ]; then msg -verm "$(fun_trans "Sistema No Soportado")" && msg -bar; return 1; fi
if [ ! /proc/meminfo ]; then msg -verm "$(fun_trans "Sistema No Soportado")" && msg -bar; return 1; fi
totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$(cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
system=$(cat /etc/issue.net)
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
[[ "$system" ]] && msg -ama "$(fun_trans "Sistema"): ${null}$system" || msg -ama "$(fun_trans "Sistema"): ${null}???"
[[ "$based" ]] && msg -ama "$(fun_trans "Base"): ${null}$based" || msg -ama "$(fun_trans "Base"): ${null}???"
[[ "$processor" ]] && msg -ama "$(fun_trans "Procesador"): ${null}$processor x$cpus" || msg -ama "$(fun_trans "Procesador"): ${null}???"
[[ "$clock" ]] && msg -ama "$(fun_trans "Frecuencia de Operacion"): ${null}$clock MHz" || msg -ama "$(fun_trans "Frecuencia de Operacion"): ${null}???"
msg -ama "$(fun_trans "Uso del Procesador"): ${null}$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')"
msg -ama "$(fun_trans "Memoria Virtual Total"): ${null}$(($totalram / 1024))"
msg -ama "$(fun_trans "Memoria Virtual En Uso"): ${null}$(($usedram / 1024))"
msg -ama "$(fun_trans "Memoria Virtual Libre"): ${null}$(($freeram / 1024))"
msg -ama "$(fun_trans "Memoria Virtual Swap"): ${null}$(($swapram / 1024))MB"
msg -ama "$(fun_trans "Tempo Online"): ${null}$(uptime)"
msg -ama "$(fun_trans "Nombre De La Maquina"): ${null}$(hostname)"
msg -ama "$(fun_trans "IP De La  Maquina"): ${null}$(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')"
msg -ama "$(fun_trans "Version de Kernel"): ${null}$(uname -r)"
msg -ama "$(fun_trans "Arquitectura"): ${null}$(uname -m)"
msg -bar
return 0
}

pid_inst () {
[[ $1 = "" ]] && echo -e "\033[1;31m [  ] " && return 0
unset portas
portas_var=$(lsof -V -i -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2\n"
    let i++
    }
done <<< "$portas_var"
[[ $(echo "${portas[@]}"|grep "$1") ]] && echo -e "\033[1;32m [X] " || echo -e "\033[1;31m [ ] "
}

menu_func () {
local options=${#@}
local array
for((num=1; num<=$options; num++)); do
echo -ne "  $(msg -verd "[$num]") $(msg -verm2 "=>>") "
  array=(${!num})
  case ${array[0]} in
    "-vd")msg -verd "\033[1;33m[!]\033[1;32m $(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
    "-vm")msg -verm2 "\033[1;33m[!]\033[1;31m $(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
    "-fi")msg -azu "$(fun_trans "${array[@]:2}") ${array[1]}" | sed ':a;N;$!ba;s/\n/ /g';;
    *)msg -azu "$(fun_trans "${array[@]}")" | sed ':a;N;$!ba;s/\n/ /g';;
  esac
done
}

#MENU PROTOCOLOS
menu_inst () {
pid_inst
valuest=$(ps ax |grep /etc/shadowsocks-r|grep -v grep)
[[ $valuest != "" ]] && valuest="\033[1;32m [X] \e[0m" || valuest="\033[1;31m [ ] \e[0m"
   export -f fun_eth
   export -f fun_bar
   tput sgr0
   tput clear
   msg -bar
   echo -e "        \e[1;97m         MENU DE PROTOCOLOS           \e[0m"
   msg -bar
   echo -e "$(msg -verd "[1]") $(msg -bra "OPENSSH      ➭ $(pid_inst sshd)")      $(msg -verd "[7]") $(msg -bra "V2RAY        ➭ $(pid_inst v2ray)")"
   echo -e "$(msg -verd "[2]") $(msg -bra "DROPBEAR     ➭ $(pid_inst dropbear)")      $(msg -verd "[8]") $(msg -bra "SOCK-PYTHON  ➭ $(pid_inst python)")"
   echo -e "$(msg -verd "[3]") $(msg -bra "SQUID        ➭ $(pid_inst squid)")      $(msg -verd "[9]") $(msg -bra "SHADOWSOCK-N ➭ $(pid_inst ssserver)")"
   echo -e "$(msg -verd "[4]") $(msg -bra "OPENVPN      ➭ $(pid_inst openvpn)")     $(msg -verd "[10]") $(msg -bra "SHADOWSOCK-R ➭ ${valuest}")"
   echo -e "$(msg -verd "[5]") $(msg -bra "BAD-VPN 7300 ➭ $(pid_inst badvpn)")     $(msg -verd "[11]") $(msg -bra "SHADOWSOCK-L ➭ $(pid_inst ss-server)")"
   echo -e "$(msg -verd "[6]") $(msg -bra "STUNNEL      ➭ $(pid_inst stunnel4)")     $(msg -verd "[12]") $(msg -bra "BOT-TELEGRAM")"
   msg -bar
   echo -e "         \e[1;97m       MENU DE HERRAMIENTAS         \e[0m"
   msg -bar
   echo -e "$(msg -verd "[13]") $(msg -bra "ARCHIVOS EN LINEA ")      $(msg -verd "[19]") $(msg -bra "OPTIMIZAR SISTEMA ")"
   echo -e "$(msg -verd "[14]") $(msg -bra "SEGURIDAD/PROTECCION ")   $(msg -verd "[20]") $(msg -bra "PATCHER_VPS_O.S. ")"
   echo -e "$(msg -verd "[15]") $(msg -bra "ACELERADOR TCP ")         $(msg -verd "[21]") $(msg -bra "DETALLE DEL SISTEMA ")"
   echo -e "$(msg -verd "[16]") $(msg -bra "AÑADIR DNS NETFLIX ")     $(msg -verd "[22]") $(msg -bra "SCANNER SUB_DOMINIO ")"
   echo -e "$(msg -verd "[17]") $(msg -bra "AJUSTES DE PUERTOS ")     $(msg -verd "[23]") $(msg -bra "PRUEBA DE VELOCIDAD ")"
   echo -e "$(msg -verd "[18]") $(msg -bra "AJUSTES INTERNOS ")       $(msg -verd "[0]") \e[1;41m| REGRESA A PANEL |\e[0m"
   msg -bar2
   echo -ne " ►\e[1;37m Selecione Una Opcion: \e[33m " && read select
   case $select in
    0) return;;
    1)
        ${SCPinst}/openssh.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    2)
        ${SCPinst}/dropbear.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    3)
        ${SCPinst}/squid.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    4)
        ${SCPinst}/openvpn.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    5)
        ${SCPinst}/budp.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    6)
        ${SCPinst}/ssl.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;                
    7)
        ${SCPinst}/v2ray.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    8)
        ${SCPinst}/sockspy.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    9)
        ${SCPinst}/shadowsocks.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    10)
        ${SCPinst}/Shadowsocks-R.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    11)
        ${SCPinst}/Shadowsocks-libev.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    12)
        ${SCPfrm}/ADMbot.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;; 
    13)
        ${SCPfrm}/apacheon.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    14)
        secprot && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;        
    15)
        ${SCPfrm}/tcp.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;   
    16)
        ${SCPfrm}/dns-netflix.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;           
    17)
        ${SCPfrm}/ports.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;           
    18)
        ${SCPfrm}/gestor.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;          
    19)
        ${SCPfrm}/utils.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;           
    20)
        oracl && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;           
    21)
        systen_info && msg -ne "Enter Para Continuar" && read enter
        systen_info
        ;;          
    22)
        ${SCPfrm}/ultrahost && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;                  
    23)
        ${SCPfrm}/speed.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;                
    *)
        msg -verm2 " OPCION INVALIDA, ESCOGE OTRAVEZ !!!"
        sleep 1.s
        menu_inst
        ;;
    esac
}

# FUNCION SELECT
selection_fun () {
local selection="null"
local range
for((i=0; i<=$1; i++)); do range[$i]="$i "; done
while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
echo -ne "\033[1;37m$(fun_trans " >> Seleccione una Opción"): " >&2
read selection
tput cuu1 >&2 && tput dl1 >&2
done
echo $selection
}

# SUB-MENU SEGURIDAD
secprot () {
tput clear
msg -bar
echo -e "\033[1;32m                SEGURIDAD / PROTECCION         \e[0m"
msg -bar
echo -ne "$(msg -verd "[1]") "&& msg -bra " \033[1;97m CORTAFUEGOS ADM_JMNIC\e[0m"
echo -ne "$(msg -verd "[2]") "&& msg -bra " \033[1;97m FAIL2BAN (PREVENCION)\e[0m"
echo -ne "$(msg -verd "[3]") "&& msg -bra " \033[1;97m ANTI_DDOS (PROTECCION)\e[0m"
echo -ne "$(msg -verd "[4]") "&& msg -bra " \033[1;97m AUTENTIFICAR PROXY_SQUID\e[0m"
echo -ne "$(msg -verd "[5]") "&& msg -bra " \033[1;97m DESACTIVAR PASS ALFANUMERICO\e[0m"
msg -bar
echo -ne "$(msg -verd "[0]") "&& msg -bra " \033[1;31m REGRESAR AL PANEL\e[0m"
msg -bar
echo -ne " ►\e[1;37m Selecione Una Opcion: \e[33m " && read select
case $select in
    0) ;;
    1)
        ${SCPfrm}/blockBT.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;
    2)
        ${SCPfrm}/fai2ban.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;   
    3)
        ${SCPfrm}/ddos.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;           
    4)
        ${SCPfrm}/squidpass.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;           
    5)
        ${SCPfrm}/Unlock-Pass-VULTR.sh && msg -ne "Enter Para Continuar" && read enter
        menu_inst
        ;;          
     *)
        ;;
    esac
}

# CREDITOS
crdss () {
clear 
msg -bar
echo -e "\033[1;93m          CREDITOS DEL SCRIPT ADM_JMNIC     \e[0m"
msg -bar
[[ -e ${SCPdir}/message.txt ]] && msg -bra " 👤 RESELLER ADMIN: \033[1;96m $(cat ${SCPdir}/message.txt) "
[[ -e ${SCPdir}/key.txt ]] && msg -bra " 🔑 KEY: \033[1;93m $(cat ${SCPdir}/key.txt)"
msg -bar
echo -ne "- ADM MODS tomando de base: Adm Ultimate\n"
echo -ne "- Optimizacion de Instaladores (ADM_JMNIC)\n"
echo -ne "- (ADM-JMNIC) Paneles Mejorados\n"
echo -ne "- Actualizacion de Sistema de Registros\n"
echo -ne "- Actualizacion de Protocolos y Librerias\n"
echo -ne "- Activacion de Apartado PATCHER_VPS_O.S.\n"
sleep 1
echo
msg -bar
echo -ne "- Script Mods Como Muestra de Agradecimiento. \n"
msg -bar
}

# MONITOR DE SERVICIOS
monservi_fun () {
clear
monssh () {
sed -i "57d" /bin/monitor.sh
sed -i '57i EstadoServicio ssh' /bin/monitor.sh
}
mondropbear () {
sed -i "59d" /bin/monitor.sh
sed -i '59i EstadoServicio dropbear' /bin/monitor.sh
}
monssl() {
sed -i "61d" /bin/monitor.sh
sed -i '61i EstadoServicio stunnel4' /bin/monitor.sh
}
monsquid() {
sed -i "63d" /bin/monitor.sh
sed -i '63i [[ $(EstadoServicio squid) ]] && EstadoServicio squid3' /bin/monitor.sh
}
monapache() {
sed -i "65d" /bin/monitor.sh
sed -i '65i EstadoServicio apache2' /bin/monitor.sh
}
monv2ray() {
sed -i "67d" /bin/monitor.sh
sed -i '67i EstadoServicio v2ray' /bin/monitor.sh
}

clear
msg -bar
echo -e "\033[1;32m          MONITOR WEB SERVICIOS PRINCIPALES"

PIDVRF3="$(ps aux|grep "${SCPdir}/menu monitorservi"|grep -v grep|awk '{print $2}')"

PIDVRF5="$(ps aux|grep "${SCPdir}/menu moni2"|grep -v grep|awk '{print $2}')"

if [[ -z $PIDVRF3 ]]; then
sed -i '5a\screen -dmS very3 /etc/newadm/menu monitorservi' /bin/resetsshdrop
msg -bar
echo -e "\033[1;34m          ¿Monitorear Protocolo SSH?"
msg -bar
read -p "                    [ s | n ]: " monssh  
sed -i "57d" /bin/monitor.sh
sed -i '57i #EstadoServicio ssh' /bin/monitor.sh 
[[ "$monssh" = "s" || "$monssh" = "S" ]] && monssh
msg -bar
echo -e "\033[1;34m          ¿Monitorear Protocolo DROPBEAR?"
msg -bar
read -p "                    [ s | n ]: " mondropbear  
sed -i "59d" /bin/monitor.sh
sed -i '59i #EstadoServicio dropbear' /bin/monitor.sh
[[ "$mondropbear" = "s" || "$mondropbear" = "S" ]] && mondropbear
msg -bar
echo -e "\033[1;34m            ¿Monitorear Protocolo SSL?"
msg -bar
read -p "                    [ s | n ]: " monssl  
sed -i "61d" /bin/monitor.sh
sed -i '61i #EstadoServicio stunnel4' /bin/monitor.sh
[[ "$monssl" = "s" || "$monssl" = "S" ]] && monssl
msg -bar
echo -e "\033[1;34m            ¿Monitorear Protocolo SQUID?"
msg -bar
read -p "                    [ s | n ]: " monsquid  
sed -i "63d" /bin/monitor.sh
sed -i '63i #[[ $(EstadoServicio squid) ]] && EstadoServicio squid3' /bin/monitor.sh
[[ "$monsquid" = "s" || "$monsquid" = "S" ]] && monsquid
msg -bar
echo -e "\033[1;34m            ¿Monitorear Protocolo APACHE?"
msg -bar
read -p "                    [ s | n ]: " monapache  
sed -i "65d" /bin/monitor.sh
sed -i '65i #EstadoServicio apache2' /bin/monitor.sh
[[ "$monapache" = "s" || "$monapache" = "S" ]] && monapache
msg -bar
echo -e "\033[1;34m            ¿Monitorear Protocolo V2RAY?"
msg -bar
read -p "                    [ s | n ]: " monv2ray  
sed -i "67d" /bin/monitor.sh
sed -i '67i #EstadoServicio v2ray' /bin/monitor.sh
[[ "$monapache" = "s" || "$monapache" = "S" ]] && monv2ray

cd ${SCPdir}
screen -dmS very3 ${SCPdir}/menu monitorservi
screen -dmS monis2 ${SCPdir}/menu moni2

else
for pid in $(echo $PIDVRF3); do
kill -9 $pid &>/dev/null
sed -i "6d" /bin/resetsshdrop
done

for pid in $(echo $PIDVRF5); do
kill -9 $pid &>/dev/null
done

fi
msg -bar
echo -e "             Puedes Monitorear desde:\n       \033[1;32m http://$(meu_ip):81/monitor.html"
msg -bar
[[ -z ${VERY3} ]] && monitorservi="\033[1;32m ACTIVADO " || monitorservi="\033[1;31m INACTIVO "
echo -e "            $monitorservi  --  CON EXITO"
msg -bar
}

# ADICIONAL
menu_adc () {
clear
msg -bar
echo -e "\033[1;32m                MENU ADICIONAL         \e[0m"
msg -bar
echo -ne "$(msg -verd "[1]") "&& msg -bra " \033[1;97m➪ REFRESCAR RAM DE SISTEMA   "
echo -ne "$(msg -verd "[2]") "&& msg -bra " \033[1;97m➪ COLORES DEL PANEL   "
echo -ne "$(msg -verd "[3]") "&& msg -bra " \033[1;97m➪ CREDITOS DEL SCRIPT   "
msg -bar
echo -ne "$(msg -verd "[0]") "&& msg -bra " \033[1;31m➪ REGRESAR AL PANEL   "
msg -bar
selection=$(selection_fun 4)
case ${selection} in
1)limpar_caches;;
2)canbio_color;;
3)crdss;;
0)return;;
*)
esac
}

#PROCESAMIENTO DE SENTENCIA VERS
[[ ! -e /etc/versin_script ]] && echo 1 > /etc/versin_script
v11=$(cat /etc/versin_script_new) 
v22=$(cat /etc/versin_script)
[[ $v11 = $v22 ]] && vrson="\e[1;32mVers.$v22\e[0m" || vrson="\e[1;31mVers.$v22\e[0m" 
[[ $v11 = $v22 ]] && vrson2="\e[1;37m Tienes Tu  Script_Mod Actualizado\e[0m" || vrson2="\e[1;37m Atento, Tu Script Debe Actualizarce\e[0m" 

# EXECUÇÃO MENU
export -f msg
export -f selection_fun
export -f fun_trans
export -f menu_func
export -f meu_ip
export -f fun_ip
clear

# TIMER MONITOR
monitor_auto () {
while true; do
monitor.sh 2>/dev/null
sleep 120s 
    done
}
if [[ "$1" = "monitorservi" ]]; then
monitor_auto
exit
fi

# RESET PYDIREC
pid_kill () {
[[ -z $1 ]] && refurn 1
pids="$@"
for pid in $(echo $pids); do
kill -9 $pid &>/dev/null
done
}

monitorport_fun () {
while true; do
pidproxy3=$(ps x | grep "PDirect.py" | grep -v "grep" | awk -F "pts" '{print $1}') && [[ ! -z $pidproxy3 ]] && pid_kill $pidproxy3
sleep 6h 
done
}

if [[ "$1" = "moni2" ]]; then
monitorport_fun
exit
fi

##LIMITADOR 
verif_funx () {
clear
msg -bar
echo -e "\033[1;32m             LIMITADOR DE CUENTAS"
msg -bar
echo -e "Esta Opcion Limita las Conexiones de SSH/SSL/DROPB/WS"
PIDVRF="$(ps aux|grep "${SCPusr}/usercodes verificar"|grep -v grep|awk '{print $2}')"
if [[ -z $PIDVRF ]]; then
msg -bar
echo -ne "\033[1;96m   ¿Cada cuantos segundos ejecutar el limitador?\n\033[1;97m  +Segundos = -Uso de CPU | -Segundos = +Uso de CPU\033[0;92m \n                Predeterminado:\033[1;37m 120s\n     Cuantos Segundos (Numeros Unicamente): " && read tiemlim   
[[ -z "$tiemlim" ]] && tiemlim="120"
echo "${tiemlim}" > /etc/newadm/ger-user/tiemlim.log
cd ${SCPusr}
screen -dmS very ${SCPusr}/usercodes verificar
else
for pid in $(echo $PIDVRF); do
kill -9 $pid &>/dev/null
done
[[ -e ${SCPdir}/USRonlines ]] && rm ${SCPdir}/USRonlines
[[ -e ${SCPdir}/USRexpired ]] && rm ${SCPdir}/USRexpired
[[ -e ${SCPdir}/USRbloqueados ]] && rm ${SCPdir}/USRbloqueados
fi
msg -bar
[[ -z ${VERY} ]] && verificar="\033[1;32m ACTIVADO " || verificar="\033[1;31m INACTIVO "
echo -e "            $verificar  --  CON EXITO"
msg -bar
}

##DESBLOQUEO
verif2_funx () {
clear
msg -bar
echo -e "\033[1;32m      DESBLOQUEO AUT. Y EXPIRADOS"
msg -bar
echo -e "Esta opcion desbloquea cada 60 segundos a usuarios\nbloqueados por el limitador y limpia los usuarios expirados"
PIDVRF2="$(ps aux|grep "${SCPusr}/usercodes desbloqueo"|grep -v grep|awk '{print $2}')"
if [[ -z $PIDVRF2 ]]; then
msg -bar
echo -ne "\033[1;96m   ¿Cada cuantos segundos ejecutar el desbloqueador?\n\033[1;97m  +Segundos = -Uso de CPU | -Segundos = +Uso de CPU\033[0;92m \n                Predeterminado:\033[1;37m 300s\n     Cuantos Segundos (Numeros Unicamente): " && read tiemdes   
[[ -z "$tiemdes" ]] && tiemdes="300"
echo "${tiemdes}" > /etc/newadm/ger-user/tiemdes.log
cd ${SCPusr}
screen -dmS very2 ${SCPusr}/usercodes desbloqueo
else
for pid in $(echo $PIDVRF2); do
kill -9 $pid &>/dev/null
done
fi
msg -bar
[[ -z ${VERY2} ]] && desbloqueo="\033[1;32m ACTIVADO " || desbloqueo="\033[1;31m INACTIVO "
echo -e "            $desbloqueo  --  CON EXITO"
msg -bar
}

### PANEL PRINCIPAL
#CUENTAS REGISTRADAS APROX
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
#MONITOR DE CUENTAS ACTIVAS SSRR
user_info=$(cd /usr/local/shadowsocksr &> /dev/null  && python mujson_mgr.py -l ) 
user_total=$(echo "${user_info}"|wc -l)
on="\033[1;92m[ON]\e[0m" && off="\033[1;31m[OFF]\e[0m"
VERY="$(ps aux|grep "${SCPusr}/usercodes verificar"| grep -v grep)"
VERY2="$(ps aux|grep "${SCPusr}/usercodes desbloqueo"| grep -v grep)"
VERY3="$(ps aux|grep "${SCPdir}/menu monitorservi"| grep -v grep)"
[[ -z ${VERY} ]] && verificar="\033[1;31m[OFF]" || verificar="\033[1;32m[ON]"
[[ -z ${VERY2} ]] && desbloqueo="\033[1;31m[OFF]" || desbloqueo="\033[1;32m[ON]"
[[ -z ${VERY3} ]] && monitorservi="\033[1;31m[OFF]" || monitorservi="\033[1;32m[ON]"

echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
echo -e "\e[1;7;37m ►►      ADM - JMNIC     ◄◄ \e[0m\e[1;47;31m  [   SCRIPT ADMOS   ]  \e[0m|"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
tput sgr0
echo -e "\e[1;97mScript $vrson |$vrson2"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
echo -e "\e[1;37m ADMIN RESELLER: \e[1;31m[$(cat ${SCPdir}/message.txt)] \e[0m"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m" && tput sgr0 
msg -ne "\e[1;32m S.O: \e[0m" && echo -ne "\033[1;97m$(os_system)\e[0m"
msg -ne "\e[1;32m           IP: \e[0m" && echo -e "\033[1;97m$(meu_ip)\e[0m"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
[[ -e ${SCPdir}/USRonlines ]] && msg -ne "\033[1;97m LIMITADOR: $verificar  \033[1;97mDESBLOQUEO: $desbloqueo  \033[1;95m BADVPN: $(pid_inst badvpn) \n" && msg -ne "\033[1;32m   CONECTADOS: " && echo -ne "\033[1;97m$(cat ${SCPdir}/USRonlines) "
[[ -e ${SCPdir}/USRexpired ]] && msg -ne "   EXPIRADOS: " && echo -ne "\033[1;97m$(cat ${SCPdir}/USRexpired) "  && msg -ne " \033[1;95m BLOQUEADOS: " && echo -e "\033[1;97m$(cat ${SCPdir}/USRbloqueados)" && tput sgr0 && echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
echo -e "\e[1;37m REGISTROS_USERS SSH: \033[1;92m$_tuser\e[0m    \e[1;37m REGISTROS_USERS SSR: \033[1;92m$user_total\e[0m"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
echo -e "       \e[1;47;31m=========>> ADMINISTRADOR <<========\e[0m"
echo -e "\e[1;32m [1] \e[1;37mSSH/SSL/DROPB/WS      \e[1;32m[2] \e[1;37mSS/SSR      \e[1;32m[3] \e[1;37mV2RAY \e[0m"
echo -e "       \e[7;49;97m========>>  INSTALADORES  <<========\e[0m"
echo -e "\e[1;32m [4]        \e[97mPROTOCOLOS  \e[1;32mHERRAMIENTAS\e[0m"
echo -e "       \e[1;47;94m=======>>AJUSTES ADICIONALES<<======\e[0m"
echo -e "\e[1;32m [5] \e[1;37mPUERTOS ACTIVOS       \e[1;32m[6] \e[1;37mEXTRA_TOOLS\e[0m"
echo -e "\e[1;32m [7] \e[1;37mMONITOR  ▪︎|${monitorservi}      \e[1;32m[8] \e[1;37mAUTO_INICIO▪︎|$AutoRun \e[0m"
echo -e "\e[1;32m [9] \e[1;37mACTIVAR LIMITADOR     \e[1;32m[10] \e[1;37mACTIVAR DESBLOQUEO\e[0m"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
echo -e "\e[1;32m [11] \e[1;33mACTUALIZAR   \e[1;32m[12] \e[1;31mDESINTALAR    \e[1;32m[0] \e[1;37mSALIR \e[0m"
echo -e "\e[38m▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\e[0m"
selection=$(selection_fun 13)
case ${selection} in
1)${SCPusr}/usercodes "${idioma}" ;;
2)${SCPinst}/C-SSR.sh ;;
3)${SCPinst}/v2ray.sh ;;
4)menu_inst;;
5)mine_port;;
6)menu_adc;;
7)monservi_fun;;
8)fun_autorun;;
9)verif_funx;;
10)verif2_funx;;
11)atualiza_fun;;
12)remove_script;;
0)clear && cd $HOME && exit 0;;
*)
esac
msg -ne "Enter Para Continuar" && read enter
${SCPdir}/menu
#fin
